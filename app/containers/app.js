import React, { Component } from 'react';
import { connect } from 'react-redux';
import { meFromToken, meFromTokenSuccess, meFromTokenFailure, resetToken } from '../actions/users';

class App extends Component {
    componentWillMount() {
        this.props.loadUserFromToken();
    }

    render() {
        return (
            <div>
                {this.props.children}
            </div>
        );
    }
}

const mapDispatchToProps = (dispatch) => {
    return {
        loadUserFromToken: () => {
            let token = sessionStorage.getItem('token');
            if(!token || token === '') {//if there is no token, dont bother
                return;
            }

            //fetch user from token (if server deems it's valid token)
            dispatch(meFromToken(token))
                .then((response) => {
                    if (!response.error) {
                        //reset token (possibly new token that was regenerated by the server)
                        sessionStorage.setItem('token', response.payload.data.user.token);
                        dispatch(meFromTokenSuccess(response.payload))
                    } else {
                        sessionStorage.removeItem('token');//remove token from storage
                        dispatch(meFromTokenFailure(response.payload));
                    }
                });
        },
        resetMe: () =>{
            sessionStorage.removeItem('token'); //remove token from storage
            dispatch(resetToken());
        }
    }
}


export default connect(null, mapDispatchToProps)(App);
